(* -*- tuareg -*- *)

#directory "+compiler-libs";;
open Ppx_core

let x = 1 [@@foo]
[%%expect{|
Line _, characters 13-16:
Error: Attribute `foo' was not used
|}];;

let f x = 1 [@@deprecatd "..."]
[%%expect{|
Line _, characters 15-24:
Error: Attribute `deprecatd' was not used.
Hint: Did you mean deprecated?
|}];;

let attr : _ Attribute.t =
  Attribute.declare "blah"
    Attribute.Context.type_declaration
    Ast_pattern.(__)
    ignore

type t = int [@blah]
[%%expect{|
Line _, characters 15-19:
Error: Attribute `blah' was not used.
Hint: `blah' is available for type declarations but is used here in the
context of a core type.
Did you put it at the wrong level?
|}];;

let attr : _ Attribute.t =
  Attribute.declare "blah"
    Attribute.Context.expression
    Ast_pattern.(__)
    ignore

type t = int [@blah]
[%%expect{|
Line _, characters 15-19:
Error: Attribute `blah' was not used.
Hint: `blah' is available for expressions and type declarations but is used
here in the context of a core type.
Did you put it at the wrong level?
|}];;

(* Attribute drops *)

let faulty_transformation = object
  inherit Ast_traverse.map as super

  method! expression e =
    match e.pexp_desc with
    | Pexp_constant c ->
      Ast_builder.Default.pexp_constant ~loc:e.pexp_loc c
    | _ -> super#expression e
end
let () =
  Ppx_driver.register_transformation "faulty" ~impl:faulty_transformation#structure

let x = (42 [@foo])
[%%expect{|
Line _, characters 14-17:
Error: Attribute `foo' was silently dropped
|}];;

(* Linters *)

let lint = object
  inherit [Ppx_driver.Lint_error.t list] Ast_traverse.fold as super

  method! type_declaration td acc =
    let acc = super#type_declaration td acc in
    match td.ptype_kind with
    | Ptype_record lds ->
      if Poly.(<>)
           (List.sort lds ~cmp:(fun a b -> String.compare a.pld_name.txt b.pld_name.txt))
           lds
      then
        Ppx_driver.Lint_error.of_string td.ptype_loc
          "Fields are not sorted!"
        :: acc
      else
        acc
    | _ -> acc
end
let () =
  Ppx_driver.register_transformation "lint" ~lint_impl:(fun st -> lint#structure st [])

type t =
  { b : int
  ; a : int
  }

[%%expect{|
Line _, characters 0-36:
Warning 22: Fields are not sorted!
Line _:
Error: Some fatal warnings were triggered (1 occurrences)
|}]

(* Extension with a path argument *)

let () =
  Ppx_driver.register_transformation "plop"
    ~rules:[Context_free.Rule.extension
              (Extension.declare_with_path_arg "plop"
                 Expression
                 Ast_pattern.(pstr nil)
                 (fun ~loc ~path:_ ~arg ->
                    let open Ast_builder.Default in
                    match arg with
                    | None -> estring ~loc "-"
                    | Some { loc; txt } -> estring ~loc (Longident.name txt)))]

let () = printf "%s\n" [%plop]

[%%expect{|
-
|}]

let () = printf "%s\n" [%plop.Truc]

[%%expect{|
Truc
|}]

let () = printf "%s\n" [%plop.Truc.Bidule]

[%%expect{|
Truc.Bidule
|}]

(* vim: set ft=ocaml: *)
